// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 8907ffca23
// Version Date: Wed Nov 27 21:28:21 UTC 2019

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "jkfr/protobuf/demo"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC HelloServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.HelloServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// hello

		sayhello: grpctransport.NewServer(
			endpoints.SayHelloEndpoint,
			DecodeGRPCSayHelloRequest,
			EncodeGRPCSayHelloResponse,
			serverOptions...,
		),
		getpersons: grpctransport.NewServer(
			endpoints.GetPersonsEndpoint,
			DecodeGRPCGetPersonsRequest,
			EncodeGRPCGetPersonsResponse,
			serverOptions...,
		),
		getpersonbyname: grpctransport.NewServer(
			endpoints.GetPersonByNameEndpoint,
			DecodeGRPCGetPersonByNameRequest,
			EncodeGRPCGetPersonByNameResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the HelloServer interface
type grpcServer struct {
	sayhello        grpctransport.Handler
	getpersons      grpctransport.Handler
	getpersonbyname grpctransport.Handler
}

// Methods for grpcServer to implement HelloServer interface

func (s *grpcServer) SayHello(ctx context.Context, req *pb.HelloRequest) (*pb.HelloReply, error) {
	_, rep, err := s.sayhello.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.HelloReply), nil
}

func (s *grpcServer) GetPersons(ctx context.Context, req *pb.PersonRequest) (*pb.PersonsReply, error) {
	_, rep, err := s.getpersons.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.PersonsReply), nil
}

func (s *grpcServer) GetPersonByName(ctx context.Context, req *pb.HelloRequest) (*pb.Person, error) {
	_, rep, err := s.getpersonbyname.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.Person), nil
}

// Server Decode

// DecodeGRPCSayHelloRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC sayhello request to a user-domain sayhello request. Primarily useful in a server.
func DecodeGRPCSayHelloRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.HelloRequest)
	return req, nil
}

// DecodeGRPCGetPersonsRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getpersons request to a user-domain getpersons request. Primarily useful in a server.
func DecodeGRPCGetPersonsRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.PersonRequest)
	return req, nil
}

// DecodeGRPCGetPersonByNameRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getpersonbyname request to a user-domain getpersonbyname request. Primarily useful in a server.
func DecodeGRPCGetPersonByNameRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.HelloRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCSayHelloResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain sayhello response to a gRPC sayhello reply. Primarily useful in a server.
func EncodeGRPCSayHelloResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.HelloReply)
	return resp, nil
}

// EncodeGRPCGetPersonsResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getpersons response to a gRPC getpersons reply. Primarily useful in a server.
func EncodeGRPCGetPersonsResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.PersonsReply)
	return resp, nil
}

// EncodeGRPCGetPersonByNameResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getpersonbyname response to a gRPC getpersonbyname reply. Primarily useful in a server.
func EncodeGRPCGetPersonByNameResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.Person)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
